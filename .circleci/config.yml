version: 2.1

orbs:
  audentio-frontend:
    executors: 
      docker-ce:
        docker:
          - image: docker:18.06.1-ce-git
      cypress:
        docker:
          - image: cypress/base:10
    commands:
      ## [ requires ECR_REPO set in environment ]
      build:
        description: "Build image and tag it for ECR"
        steps:
          - checkout
          - setup_remote_docker
          - run: mkdir -p workspace
          - run:
              name: Add RELEASE value (commit sha1) and sentry dsn to .env
              command: |
                echo "RELEASE=$CIRCLE_SHA1" >> .env;
          - run:
              name: Building app docker image
              no_output_timeout: 15m
              command: |
                docker build -t $ECR_REPO/$CIRCLE_BRANCH:$CIRCLE_SHA1 .
          - run:
              name: Saving image
              command: docker save -o workspace/build.tar $ECR_REPO/$CIRCLE_BRANCH:$CIRCLE_SHA1
          - run:
              name: Copy dist from image
              command: docker cp $(docker create -t -i $ECR_REPO/$CIRCLE_BRANCH:$CIRCLE_SHA1):/opt/app/storybook-build workspace/storybook-build
          - persist_to_workspace:
              root: workspace
              paths:
                - build.tar
                - storybook-build
      pushimage:
        description: "Push built app image to ECR Repository"
        steps:
          - setup_remote_docker
          - attach_workspace:
              at: /tmp/workspace
          - run:
              name: Loading app image
              command: docker load -i /tmp/workspace/build.tar
          - run:
              name: Installing dependencies
              command: |
                apk add py-pip
                pip install awscli==1.17.10
          - run:
              name: Initializing AWS config
              command: sh ./.circleci/setup-eb.sh
          - run: 
              name: Login to ECR
              command: $(aws ecr get-login --no-include-email --profile audentio)
          - run:
              name: Pushing app image to ECR
              command: docker push $ECR_REPO/$CIRCLE_BRANCH:$CIRCLE_SHA1
      ssh-deploy:
        parameters:
          user:
            type: string
          host:
            type: string
          port:
            type: string
          key-fingerprint:
            type: string
        steps:
          - checkout
          - pushimage
          - add_ssh_keys:
              fingerprints:
                - "<< parameters.key-fingerprint >>"
          - run: ssh-keyscan << parameters.host >> >> ~/.ssh/known_hosts
          - run: APP_PORT=<< parameters.port >> sh ./.circleci/templater.sh ./.circleci/docker-compose-template.yml > docker-compose.yml
          - run: scp ./docker-compose.yml << parameters.user >>@<< parameters.host >>:"~/$CIRCLE_BRANCH.audent.io"
          - run: ssh << parameters.user >>@<< parameters.host >> "cd $CIRCLE_BRANCH.audent.io"' && $(~/.local/bin/aws ecr get-login --no-include-email --profile audentio) && /bin/docker-compose up -d'
      eb-deploy:
        steps:
          - checkout
          - pushimage
          - run:
              name: Deploying
              command: ./internals/ebdeploy.sh $EB_ENV-$CIRCLE_BRANCH
              no_output_timeout: 20m
      unit-tests:
        steps:
          - checkout
          - attach_workspace:
              at: /tmp/workspace
          - restore_cache:
              keys:
              - dependencies-{{ checksum "yarn.lock" }}
              - dependencies-
          - run: yarn --frozen-lockfile
          - save_cache:
              paths:
                - /usr/local/share/.cache/yarn
              key: dependencies-{{ checksum "yarn.lock" }}
          - run:
              name: Run linter
              command: yarn lint
          - run: 
              name: Run unit tests
              command: yarn run jest --runInBand --passWithNoTests --ci --reporters=default --reporters=jest-junit
      e2e-tests:
        parameters:
          junit-output:
            type: string
            default: test-results/jest/results.xml
        steps:
          - checkout
          - attach_workspace:
              at: /tmp/workspace
          - restore_cache:
              keys:
              - dependencies-{{ checksum "yarn.lock" }}
              - dependencies-
          - run: yarn --frozen-lockfile
          - save_cache:
              paths:
                - /usr/local/share/.cache/yarn
              key: dependencies-{{ checksum "yarn.lock" }}
          - run: yarn run build
          - run: 
              name: Start app server
              command: yarn run server
              background: true
          - run: sleep 5
          - run:
              name: Run Integration tests
              command: JEST_JUNIT_OUTPUT="<< parameters.junit-output >>" yarn run cy --reporter junit --reporter-options "mochaFile=test-results/mocha/results.xml"
          - store_test_results:
              path: test-results
          - store_artifacts:
              path: cypress/videos
          - store_artifacts:
              path: cypress/screenshots

BranchJob: &branch-job
  filters:
    branches:
      only:
        - develop
        - staging
        - master

## ?====================================================================================================================
## ?====================================================================================================================

jobs:
  build:
    executor: audentio-frontend/docker-ce
    steps: 
      - audentio-frontend/build
  deploy:
    executor: audentio-frontend/docker-ce
    steps:
      - audentio-frontend/ssh-deploy:
          key-fingerprint: bb:18:5d:b4:a4:2f:4e:72:ed:d7:31:01:50:d2:81:de
          host: s4.audent.io
          user: demo
          port: '5070'

workflows:
  audentio:
    jobs:
      - build:
          <<: *branch-job
      - deploy:
          requires:
            - build
          <<: *branch-job
