import { throttle } from '@audentio/utils/lib/throttle';
import { FormValue } from './types';

export function getValidationState(validationErrors) {
    const errors = {};

    validationErrors.inner.forEach((field): void => {
        errors[field.path] = field.errors;
    });

    return errors;
}

/**
 * Validate form using objectschema generated by `renderFields`
 */
export function getValidation(value: FormValue, fields: any = {}): Promise<{ isValid: boolean; errors: any }> {
    return new Promise(resolve => {
        // quit early if there's nothing to validate
        if (Object.keys(fields).length === 0) {
            resolve({ isValid: true, errors: null });
            return;
        }

        import('yup')
            .then(yup => {
                return yup.object().shape(fields);
            })
            .then(formSchema => {
                formSchema
                    .validate(value, { abortEarly: false })
                    .then(() => {
                        const result = {
                            isValid: true,
                            errors: null,
                        };

                        resolve(result);
                    })
                    .catch(validationErrors => {
                        const result = {
                            isValid: false,
                            errors: getValidationState(validationErrors),
                        };

                        resolve(result);
                    });
            });
    });
}

/**
 * validate form and update state
 * throttled so it can be called on fast-triggering events
 */
export const validate: (value: FormValue, fields, onValidate: Function) => void = throttle(
    async (value, fields, onValidate) => {
        const { isValid, errors } = await getValidation(value, fields);

        onValidate({ isValid, errors });
    },
    500
);
